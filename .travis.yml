# force run: 1
dist: xenial
language: c
python:
  - "3.6"
sudo: required
before_install:
    - sudo -H DEBIAN_FRONTEND=noninteractive apt-get update
    - sudo apt-get -y install python3-pip python-dev
    - sudo pip3 install -U setuptools
    - sudo pip3 install -U virtualenvwrapper
    - which python
    - python --version
#    - sudo -H PATH="${PATH}:/usr/local/clang-3.4/bin" pip3 install -r requirements.txt
    - pip3 install --user cpp-coveralls
env:
  global:
    - COVERALLS_PARALLEL=true
    # The next declaration is the encrypted COVERITY_SCAN_TOKEN, created
    #   via the "travis encrypt" command using the project repo's public key
    - secure: "MUzUSD/uRmjvh0oKBSlKfNkQnPGiN0l4TeKY1nehQQB4h6WiOlVbAu1PCUxR9G/DOmVMLUasWTEB9j5H9hWsvR1MwNge7woHtuW6YmUxw4/+Sh2pOqMIjwpqywFXtY/zfXa8AGpQI0ZOR0eg1mMq/6OV23pkOz9XnfqwvHtVvxs="
script: sh -x ./scripts/do-test.sh ${TTYPE}
after_success:
  - for f in `make -f tests/Makefile list_tests`;
    do
      cat tests/${f}.log;
    done
  - if [ "${CC}" = "gcc" ];
    then
      sh -x ./scripts/submit-coverage.sh ;
    fi
notifications:
  webhooks: https://coveralls.io/webhook

stages:
  - name: Build Documentation
    if: (branch != master OR type != push) AND branch != improve_coverage
  - name: Build & Deploy Documentation
    if: branch = master AND type = push
  - name: Update Coverity Report
    if: branch = master AND type = cron
jobs:
  include:
    - compiler: clang
      env:
        - TTYPE=cleanbuild
      before_install: true
      after_success: true
    - compiler: gcc
      env:
        - TTYPE=cleanbuild
      before_install: true
      after_success: true
    - compiler: clang
      env:
        - TTYPE=depsbuild
      before_install:
        - sudo -H DEBIAN_FRONTEND=noninteractive apt-get update
      after_success: true
    - compiler: gcc
      env:
        - TTYPE=depsbuild
      before_install:
        - sudo -H DEBIAN_FRONTEND=noninteractive apt-get update
      after_success: true
    - compiler: clang
      env:
        - TTYPE=basic
    - compiler: gcc
      env:
        - TTYPE=basic
    - compiler: gcc
      env:
        - TTYPE=glitching
    - stage: Build Documentation
      name: Build Documentation
      before_install:
        - sudo -H DEBIAN_FRONTEND=noninteractive apt-get update
      script: sh -x ./scripts/do-docbuild.sh
      after_success:
    - stage: Build & Deploy Documentation
      name: Build Documentation and Deploy it to the rtpproxy.org repo
      before_install:
        - sudo -H DEBIAN_FRONTEND=noninteractive apt-get update
      script:
        - sh -x ./scripts/do-docbuild.sh
        - sh -x ./scripts/do-docdeploy.sh
      after_success:
    - stage: Update Coverity Report
      name: Push latest code to scan.coverity.com for analysis
      addons:
        coverity_scan:
          project:
            name: "sippy/rtpproxy"
            description: "A high-performance software proxy for RTP streams"
          notification_email: sobomax@sippysoft.com
          build_command_prepend: "./configure"
          build_command: "make all"
          branch_pattern: master
      before_install:
        - echo -n | openssl s_client -connect scan.coverity.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/ssl/certs/ca-
      script:
        - true
      after_success:
